/*!
\page how_to_plugins.html
\title Plugins How To
Target many platforms

\section1 Getting the Tepee3D Plugins API files
If you want to create your widget, create and account and in your profile, select the widgets page.
There, you'll be able to create a new Tepee3D widget by providing a name, a description and the supported platforms you
which to target.

\b{Note :} By using the remote compilation service provided, your project can be compiled on all platforms supported by Tepee3D without having you setting up anything.

\section1 Developping a Widget
\section2 What you need
\section3 Git

\section3 Editor
You can use any editor you like from emacs to notepad but we recommend QtCreator as it as proven to be efficient.
It can be downloaded along with the Qt5 libraries \l {http://qt-project.org/downloads} {here}

\section3 Obtaining a widget template
When creating a new widget, a git repository is provided and a widget template is automatically uploaded into it so that you can start developping quickly.
The template is an empty shell that you'll have to fill with a business logic and a user interface.

\section2 Structure of a Widget

A widget is essentially a class that inherits from \l {Plugins::PluginBase} and has to implement several methods.

\b{Note :} The widget template provided on the git repository contains that class, you just need to
complete it.

\code
    int                     getPluginId()          const;
    void                    initPlugin();
    QString                 getPluginName()        const;
    QString                 getPluginVersion()     const;
    QString                 getPluginDescription() const;
    QString                 getRoomPluginQmlFile() const;
    QString                 getMenuPluginQmlFile() const;
    PluginBase*             createNewInstance();
    // DatabaseServiceUserInterface
    void                    receiveResultFromSQLQuery(QList<QSqlRecord> result, int id, void *data);
    // WebServiceUserInterface
    void                    receiveResultFromHttpRequest(QNetworkReply * reply, int requestId, void *data);
\endcode

For a complete description of these method please read \l {Plugins::PluginBase}

\section3 The Business Logic

It is recommended that the business logic of a widget (models, data manipulation, webservices, database access) be implemented in C++ although you could do it in
javascript.

In order to ease that process, various classes are provided.

\section3 Using Tepee3D Services

\section3 Models

\section2 The User Interface

The User Interface of the widget is composed of QML files.
\b {Note :} If you don't know QML, it is a javascript/css like language used to describe user interfaces. You might want to take a look at \l {http://qt-project.org/doc/qt-5.0/qtdoc/gettingstartedqml.html} {this} first.

\section2 The States of a Widget

A Widget can have 3 different states, each corresponding to a view in the application.

\section3 The Idle State

This corresponds to the view in the room where

\section3 The Selected State

\section3 The Focused State

\section2 Editing the .pro file

The .pro file in your widget files is used to create the Makefile that will build your files.
When you add a class to your widget's project, you should add the .cpp and the .h to the .pro

\section2 Compiling and Testing your Widget locally

Although a remote compilation service is available to compile your widget, compiling it locally for a given platform might make you gain some time.
For that you'll need to have build Tepee3D from sources with Qt5 and the Tepee3DQt3D module like explained \l {Building Tepee3D From Sources} {here}

If you want to skip that step, you can use the compilation service to have your widget compiled. You can then download the produced library and resources if the build succeeded by visiting \l {http://tepee3d.dyndns.org/builds}


\section1 Add your qml 
When your create your qml file, you can link your main qml file with function getRoomPluginQmlFile(). In this example, Widget.qml is your qml file.

\code
QString YourClass::getRoomPluginQmlFile() const
{
    return QString("Widget.qml");
}
\endcode
\section1 Tips

\section2

\section2 Interaction with the database
If you want execute a query in the database of the application, you just have to use the signal executeSQLQuery in this way :
\code
    emit executeSQLQuery(const QString& query, QObject *sender, int id, const QString &dbName, void *data = NULL);
\endcode
N.B : "data" is a callback parameter that will be transmitted along with the result of the query.
You will receive the answer of your query in the function receiveResultFromSQLQuery

\section1 Plugins exemple
You can download the source of a start plugin at \l{https://gitorious.org/tepee3d/tepee3d/trees/master/DummyProject}

*/
