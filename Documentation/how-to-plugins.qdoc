/*!
\page how_to_plugins.html
\title Plugins How To
Tepee3D's rooms will contain widgets. They are tri-dimensional models which provide information or services for the user.
The purpose of this page is to explain how to easily develop a widget.

One way to view a Tepee3D plugin is like a small application within the application.

\section1 Getting the Tepee3D Plugins API files
If you want to create your widget, the first thing to do is to get the Development API files.
you can dowload them at this address : \l {https://gitorious.org/tepee3d/tepee3d/archive-tarball/master}

\section1 Creating a new plugin with Qtcreator
 \list 1
 \li \c Using QtCreator start a new project (Ctrl + N) or File -> New File or Project.
 \li \c Choose the template Other Project (in the Projects tab) and Empty Qt Project and press next.
 \li \c Give the project a name and choose the path were the project will be saved.
 \li \c You should disable the shadow build in the project setting
 \endlist


 \section1 Edition the .pro file

 Select your .pro file and copy the content of the template below
 \code
  qml_folder.source = PATH_WHERE_YOUR_SAVE_YOUR_PLUGIN_LIB
  qml_folder.target = ./

  TEMPLATE        = lib
  CONFIG         += qt plugin
  QT             += quick
  QT             += gui
 
 #include development files
    include (../DeveloperAPIFiles/DevelopmentFiles.pri)

 TARGET          = NAME_OF_THE_PLUGIN_LIBRARY
 DESTDIR         = WHERE_TO_PUT_THE LIBRARY
 DESTDIRQML      = qml_folder
# Copies the given files to the destination directory
defineTest(copyToDestDir) {
    files = $$1
    unix {
        QMAKE_POST_LINK  += rm -fr PATH_TO_SAVE_YOUR_FILE/$$TARGET $$escape_expand(\\n\\t)
        QMAKE_POST_LINK  += mkdir PATH_TO_SAVE_YOUR_FILE/$$TARGET $$escape_expand(\\n\\t)
    }
    win32 {
        DDIR = PATH_TO_SAVE_YOUR_FILE/$${TARGET}
        DESTDIR_WIN = $${DDIR}
        DESTDIR_WIN ~= s,/,\\,g
       QMAKE_POST_LINK +=$$quote(cmd /c del /s /f  /q  $${DESTDIR_WIN}$$escape_expand(\n\t))
     #   QMAKE_POST_LINK +=$$quote(cmd /c mkdir /y $${DDIR}escape_expand(\n\t))
    }
    for(FILE, files) {
         DDIR = PATH_TO_SAVE_YOUR_FILE/$$TARGET/
        # Replace slashes in paths with backslashes for Windows
        win32{
        DDIR = PATH_TO_SAVE_YOUR_FILE/$${TARGET}
        DESTDIR_WIN = $${DDIR}
        DESTDIR_WIN ~= s,/,\\,g
        PWD_WIN = $${PWD}
        PWD_WIN ~= s,/,\\,g
        for(FILE, OTHER_FILES){
            QMAKE_POST_LINK += $$quote(cmd /c copy /y $${PWD_WIN}\\$${FILE} $${DESTDIR_WIN}$$escape_expand(\\n\\t))
    }
}

        unix:QMAKE_POST_LINK += $$QMAKE_COPY $$quote($$FILE) $$quote($$DDIR) $$escape_expand(\\n\\t)
        win32:QMAKE_POST_LINK +=$$quote(cmd /c copy /y $${FILE} $${DDIR}$$escape_expand(\n\t))

    }
    message($$QMAKE_POST_LINK)
    export(QMAKE_POST_LINK)
}

# deploy qml files to correct dir
copyToDestDir($$OTHER_FILES)

 \endcode
 
 \section1 Add your class
 Now, your are ready to start developing your own widget. You should create your main class that inherits from \l {Plugins::PluginBase}.

In your header file :
\code
class ClassName : public Plugins::PluginBase                // MANDATORY FOR PLUGIN DEVELOPMENT
{
    Q_OBJECT                                                // NECESSARY FOR QOBJECT INHERITANCE
    Q_PLUGIN_METADATA(IID "com.tepee3d.plugins.YourPlugin") // REPLACE testplugin BY YOUR PLUGIN NAME

...
  \endcode


In your cpp file :
\code
 ClassName:: ClassName() : PluginBase()
...
 \endcode

This class should implemente this list of methods :
\code
    int                     getPluginId();
    void                    initPlugin();
    Q_INVOKABLE QString     getPluginName();
    Q_INVOKABLE QString     getPluginDescription();
    PluginBase*             getPluginBase();
    PluginBase*             createNewInstance();
    QString                 getRoomPluginQmlFile() const;
    QString                 getMenuPluginQmlFile() const;
    // DatabaseServiceUserInterface
    void                    receiveResultFromSQLQuery(QList<QSqlRecord> result, int id, void *data);
    // WebServiceUserInterface
    void                    receiveResultFromHttpRequest(QNetworkReply * reply, int requestId, void *data);

\section1 Add your qml 
When your create your qml file, you can link your main qml file with function getRoomPluginQmlFile(). In this example, Widget.qml is your qml file.

\code
QString YourClass::getRoomPluginQmlFile() const
{
    return QString("Widget.qml");
}
\endcode
\section1 Tips
\section2 Interacting with c++ class and qml
The plugin C++ class is exposed to the qml context by default.
You have an element "PluginName" in your qml file and you can call every invokable function from your cpp class in your qml.
In order to call a qml function from your cpp class, you should process as described below :
\code
QQmlComponent component(this->context->engine(), PATH_TO_YOUR_WIDGETFILE);
        QObject *object = component.create();
        QVariant returnedValue;
        QVariant msg = "example"
        QMetaObject::invokeMethod(object, QML_FUNCTION_NAME,
                Q_RETURN_ARG(QVariant, returnedValue),
                Q_ARG(QVariant, msg));
        delete object;
\endcode

\section2 Interaction with the database
If you want execute a query in the database of the application, you just have to use the signal executeSQLQuery in this way :
\code
    emit executeSQLQuery(const QString& query, QObject *sender, int id, const QString &dbName, void *data = NULL);
\endcode
N.B : "data" is a callback parameter that will be transmitted along with the result of the query.
You will receive the answer of your query in the function receiveResultFromSQLQuery
\section1 Results
When you have compiled your project, if you are under linux you will have a file .so or .dll under windows. Now you just have to upload your file on tepee website in order for it to be tested by the tepee team.

\section1 Plugins exemple
You can download the source of a start plugin at \l{https://gitorious.org/tepee3d/tepee3d/trees/master/DummyProject}

*/
