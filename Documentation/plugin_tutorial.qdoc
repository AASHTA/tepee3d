/*!
 \page plugin_tutorial.html
 \title Tepee3D Widget Tutorial
 A sample widget to get you started !


Welcome to this new tutorial about our project Tepee3D. The purpose of this article is to guide and show you how it is easy to create a plugin. We will take for example a watch plugins.  Before,  You should prepare your development environment \l {http://tepee3d.dyndns.org/doc/how-to-plugins.html} {here}.

    \table
    \header
        \li 3D
        \li 2D
    \row
        \li \inlineimage /home/exploit/tepee3d/Documentation/images/pic2.png 3d view
        \li \inlineimage /home/exploit/tepee3d/Documentation/images/pic1.png 2d view
    \endtable

 \section1 Creation of your plugin on Tepee3d website
 How to use  all environment of development that provide tepee3d team.

When your have created your account,  you have to go to account->widget->add a widget and you just have to fill a name, description and on which platforms you want your plugins.  A git repository has been created with a preconfigured plugin (think to add your public ssh key in your account setting in order to have all access to your repository ). You can also see some plugin information like id(unique id in order to recognize your application), name of your SQL database (it’s highly recommended to save your data here in tepee3d application for your plugins), plugin name and repository name



\section2 First step : Front office
	Before starting, you should have in your qt creator something like this :
     \inlineimage /home/exploit/tepee3d/Documentation/images/pic3.png qt creator menu



The first thing to do is to declare your 3D model in  watchplugin.qml. In qml, you can use “ Item3d” which is qml element especially for 3d model. Now when a user calls your plugin (in the left menu of tepee3d), a 3d watch appears in the room. In this element, you can specify scale , positions,  source of your 3d model , etc.
\code

  Item3D
    {
        id : modelAlarm
        mesh: Mesh { source: "./AlarmClock-2.dae" }
        scale : 5
        position : Qt.vector3d(-4, 2, 7)
        transform : [Rotation3D { angle : 180; axis : Qt.vector3d(1, 0, 0)}]

     }
\endcode

The second important element to declare is a “pathview” and his “delegate” which is use when  watchplugin is focused by application. it’s this list of clock you can see below. In this example , “Pathview” and “Path” are  grouped in “listview_contenair”

     \inlineimage /home/exploit/tepee3d/Documentation/images/pic4.png


\code

    Item {
        id : listview_container
        visible  : isFocused
        width: mainWindow.width / 1.4
        height: 250
        x : (mainWindow.width / 8)
        y : (mainWindow.height / 4)
        PathView {
            id: view
            model:  watch_plugin.getClockModel();
            delegate: ClockDelegate
            {
            clockId     : model.clockId
            clockCity   : model.clockCity
            clockUtc    : model.clockUtc
        }
\endcode



This is path description
\code

        path: Path {
            startX: 0; startY: 0
            PathQuad { x:listview_container.width ; y: 0; controlX: (listview_container.width / 2); controlY: (listview_container.height /2) }
            }
        }

\endcode


The other qml that you can find in the source of this example like clock.qml or addBox are  different descriptions of an object that you can see in the plugin


example  : the remove box is decribed like this  in qml  :

\code

Rectangle
{
    height : parent.height / 8
    width:  parent.width / 8
    anchors.verticalCenter: parent.verticalCenter
    anchors.horizontalCenter: parent.horizontalCenter
    scale : remove_ma.pressed ? 0.9 : 1.0
    Text
    {
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.verticalCenter: parent.verticalCenter
        text:"Remove " + watch_plugin.currentItemChangedCity
    }
    MouseArea{
        id : remove_ma
        anchors.fill: parent
        onClicked:
        {
            watch_plugin.deleteClockDB(watch_plugin.getCurrentId());
            watch_plugin.reInitModel();
            watch_plugin.pluginState = "clocks_view"
        }
    }
}
\endcode

\section3 Second step  : Back office
Now, we have seen all about front office of this plugin by qml. we will see back office by cpp file.

You should complete  these different methods with information you have  received when you have created plugins , in our case :

 \code

int WatchPlugin::getPluginId() const
{
    return 34;
}

QString     WatchPlugin::getPluginName() const
{
    return QString("WatchPlugin");
}

QString WatchPlugin::getPluginRepoName() const
{
    return QString("watch_plugin");
}
/endcode

With clocklistitem.cpp, we have created a way to plugin back office  to have access to qml listview in order to add or remove clock easily. In order to really understand why it’s so useful, i will take this example : When  a user adds a clock from Paris and London, he wants to retreive  them the next time  he launches this plugins. For this we saved in the database by using clocklistitem.  So our plugin is launched, the function retreives this clock and add them. This object is created like this
\code
this->clockModel = new Models::ListModel(new ClockListItem());
\endcode
Add a clock :
\code
 ClockListItem *clock = new ClockListItem(record.value(0).toInt(), record.value(1).toDouble(),record.value(2).toString());
            this->clockModel->appendRow(clock);
\endcode

\section4 Deployment
Now you have seen all the important point about this plugins, For more details, you can download source available.


Watch Plugin is finished now, but we have a big issue, this   plugin is available only on the platforms where you develop it. Now you should compile for all plaforms and it will take a lot of hours  …  or you just have to use our solution of remote compilation. Go to account->widget->development. Choose all platforms where you want  your application () android, Linux, Windows , Qnx ….) and click on Build . A remote compilation is launched on tepee3d server.  You can follow your compilation and your build log and YES , it is the only thing you have to do.

        \li \inlineimage /home/exploit/tepee3d/Documentation/images/pic4.png
        \li \inlineimage /home/exploit/tepee3d/Documentation/images/pic5.png









*/
