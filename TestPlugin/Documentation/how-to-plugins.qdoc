/*!
\page how_to_plugins.html
\title Plugins How To
The applicationâ€™s rooms will contain the widgets. They are tri-dimensional models which provide information or services for the user.
This purpose of his page is to explain how to easily develop a widget.

\section1 Getting the Tepee3D Plugins API files
If you want to create your widget, the fisrt to do is to get the Development API file.
you can dowload it at this adress : \l {https://gitorious.org/tepee3d/tepee3d/archive-tarball/master}

\section1 Creating a new plugins with Qtcreator
 \list 1
 \li \c Using QtCreator start a new project (Ctrl + N) or File -> New File or Project.
 \li \c Choose the template Other Project (in the Projects tab) and Empty Qt Project and press next.
 \li \c Give the project a name and choose the path were the project will be saved.
 \endlist


 \section1 Edition the .pro file

 Select your .pro file and copy the content of the template below
 \code

  TEMPLATE        = lib
  CONFIG         += qt plugin
  QT             += quick
  QT             += gui
 
 #include development files
    include (../DeveloperAPIFiles/DevelopmentFiles.pri)

 TARGET          = NAME_OF_THE_PLUGIN_LIBRARY
 DESTDIR         = WHERE_TO_PUT_THE LIBRARY
 DESTDIRQML      = qml_folder

 \endcode
 
 \section1 Add your class
 Now, your are ready to start to develop your own widget. You should create your main class that inherite from Pluginsbase. 

In your header file :
\code
class ClassName : public Plugins::PluginBase          // MANDATORY FOR PLUGIN DEVELOPMENT
{
    Q_OBJECT                        // NECESSARY FOR QOBJECT INHERITANCE
    Q_PLUGIN_METADATA(IID "com.tepee3d.plugins.testplugin")

...
  \endcode


In your cpp file :
\code
 ClassName:: ClassName() : PluginBase()
...
 \endcode

This class should implemente this list of methods :
\code
   int                     	getPluginId();
    void                    	initPlugin();
    Q_INVOKABLE QString         getPluginName();
    QString                 	getPluginDescription();
    PluginBase*            	getPluginBase();
    PluginBase*             	createNewInstance();
    QString                 	getRoomPluginQmlFile() const;
    QString                 	getMenuPluginQmlFile() const;
    // DatabaseServiceUserInterface
    void  		        receiveResultFromSQLQuery(QList<QSqlRecord> result, int id);
    // WebServiceUserInterface
    void      		        receiveResultFromHttpRequest(QNetworkReply * reply);
    void      		        exposeContentToQml(QQmlContext *context);
\endcode

\section1 Add your qml 
When your create your qml file, you can link your qml file with function getRoomPluginQmlFile(). In this example, Widget.qml is your qml file.

\code
QString YourClass::getRoomPluginQmlFile() const
{
    return QString("Widget.qml");
}
\endcode
\section1 Tips
\section2 Interect with c++ class and qml
In your main class, implemente  the function exposeContentToQml in this way :
\code
void   Yourclass::exposeContentToQml(QQmlContext *context)
{
    this->context = context;
    this->context->setContextProperty("apc",this);
}
\endcode
Now you have a element "apc" in your qml file and you can call every invokable function fron your cpp class in your qml.
In order to call a qml function from your cpp class, you should process as below :
\code
QQmlComponent component(this->context->engine(), PATH_TO_YOUR_WIDGETFILE);
        QObject *object = component.create();
        QVariant returnedValue;
        QVariant msg = "example"
        QMetaObject::invokeMethod(object, QML_FUNCTION_NAME,
                Q_RETURN_ARG(QVariant, returnedValue),
                Q_ARG(QVariant, msg));
        delete object;
\endcode
\section2 Interaction with database
If you want execute a query in the database of the application, you have just to use signal executeSQLQuery in this way :
\code
 emit (PluginBase::executeSQLQuery(YOURQUERY,this,ID_QUERY));
\endcode
You will receive the answer of your query in the function receiveResultFromSQLQuery
\section1 Results
When you had compile your project, if you are under linux you will have a file .so or .dll under windows. Now you just have to upload your file on tepee website in order to be testing by tepee team.

\section1 Plugins exemple
You can download the source of a plugin at \l{https://gitorious.org/tepee3d/tepee3d/trees/master/TestPlugin}

*/
